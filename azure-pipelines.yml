# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - feature/as-3074-appeal-service-api-pipeline
  - subtask/as-3238-add-horizon-azure-function

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  tag: '$(Build.BuildId)'
  appealsApiDockerfilePath: '$(Build.SourcesDirectory)/packages/appeals-service-api/Dockerfile'
  documentServiceApiDockerfilePath: '$(Build.SourcesDirectory)/packages/document-service-api/Dockerfile'
  appealsReplyApiDockerfilePath: '$(Build.SourcesDirectory)/packages/appeal-reply-service-api/Dockerfile'
  pdfServiceApiDockerfilePath: '$(Build.SourcesDirectory)/packages/pdf-service-api/Dockerfile'
  formswebappServiceApiDockerfilePath: '$(Build.SourcesDirectory)/packages/forms-web-app/Dockerfile'
  lpaServiceApiDockerfilePath: '$(Build.SourcesDirectory)/packages/lpa-questionnaire-web-app/Dockerfile'
  commonsDockerfilePath: '$(Build.SourcesDirectory)/packages/common/Dockerfile' 
  imageRepository: 'planninginspectorateappealplanningdecision'
  containerRegistry: 'pinscommonukscontainers3887default.azurecr.io'
  dockerRegistryServiceConnection: 'appeals-service-api-registry-connection'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  # - stage: Build_commons 
  #   displayName: Build and push commons stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(commonsDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-commons-image
  
  # - stage: Build_Forms_Webapp_API
  #   displayName: Build and forms webapp Service API stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #        - task: Docker@2
  #          displayName: Build and push an image to container registry
  #          inputs:
  #            command: buildAndPush
  #            repository: $(imageRepository)
  #            dockerfile: $(formswebappServiceApiDockerfilePath)
  #            containerRegistry: $(dockerRegistryServiceConnection)
  #            tags: |
  #              $(tag)-forms-webapp-service-api                           
   

  # - stage: Build_Lpa_questionaire_Service_API
  #   displayName: Build and push LPA Questionnaire Service API stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(lpaServiceApiDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-Lpa-quesionaire-service-api                           
  

  # - stage: Build_Pdf_Service_API
  #   displayName: Build and push Pdf Service API stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(pdfServiceApiDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-Pdf-service-api                           
  
  # - stage: Build_Appeals_Reply_Service_API
  #   displayName: Build and push Appeals Reply Service API
  #   jobs: 
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to the container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(appealsReplyApiDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-appeal-reply-service-api 

  # - stage: Build_Document_Service_API
  #   displayName: Build and push Document Service API stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(documentServiceApiDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-document-service-api                           
  
  # - stage: Build_Appeals_Service_API
  #   displayName: Build and push Appeals Service API stage
  #   jobs:
  #     - job: Build
  #       displayName: Build
  #       pool:
  #         vmImage: $(vmImageName)
  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to container registry
  #           inputs:
  #             command: buildAndPush
  #             repository: $(imageRepository)
  #             dockerfile: $(appealsApiDockerfilePath)
  #             containerRegistry: $(dockerRegistryServiceConnection)
  #             tags: |
  #               $(tag)-appeal-service-api

  - stage: Build_Horizon_Functions
    displayName: Build and Deploy Horizon Functions
    jobs:
      - job: BuildHorizonHouseholderAppealPublish
        pool:
          vmImage: $(vmImageName)
        displayName: Build Horizon Householder Appeal Publish Function
        steps:
          - bash: |
              cd packages/horizon-householder-appeal-publish
              npm install 
              npm run build --if-present
              npm prune --production
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
              includeRootFolder: false
              archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
              artifactName: 'drop'
      - job: BuildHorizonCreateContactFunction
        pool:
          vmImage: $(vmImageName)
        displayName: Build Horizon Create Contact Function
        steps:
          - bash: |
              cd packages/horizon-create-contact
              npm install 
              npm run build --if-present
              npm prune --production
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
              includeRootFolder: false
              archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
              artifactName: 'drop'
      - job: BuildHorizonAddContactFunction
        pool:
          vmImage: $(vmImageName)
        displayName: Build Horizon Add Contact Function
        steps:
          - bash: |
              cd packages/horizon-add-document
              npm install 
              npm run build --if-present
              npm prune --production
          - task: ArchiveFiles@2
            displayName: "Archive files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
              includeRootFolder: false
              archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
              artifactName: 'drop'
          # - task: AzureFunctionApp@1
          #   inputs:
          #     azureSubscription: '<Azure service connection>'
          #     appType: functionAppLinux
          #     appName: 'horizonAddContact'
          #     #Uncomment the next lines to deploy to a deployment slot
          #     #Note that deployment slots is not supported for Linux Dynamic SKU
          #     #deployToSlotOrASE: true
          #     #resourceGroupName: '<Resource Group Name>'
          #     #slotName: '<Slot name>'




  